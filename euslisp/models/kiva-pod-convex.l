;;
;; DO NOT EDIT THIS FILE
;;
;; this file is automatically generated from pod_lowres_convex.dae on (Linux green 3.19.0-65-generic x86_64) at Thu Jul 21 17:56:56 2016

;;
;; /home/wkentaro/ros/hrp2_apc_ws/src/start-jsk/jsk_apc/jsk_apc2015_common/models/kiva_pod/urdf $ /opt/ros/indigo/lib/euscollada/collada2eus pod_lowres_convex.dae kiva-pod-convex.l 
;;

;; copy euscollada-robot class definition from euscollada/src/euscollada-robot.l
;;
(defclass euscollada-robot
;; This euscollada-robot class is for robots converted from collada files.
;; This class provides :init-ending override.
  :super robot-model
  :slots ()
  )
(defmethod euscollada-robot
  (:init-ending
   (&optional (type :collada))
   (when (eq type :collada)
     ;; fix all links' mass properties ;; root link relative (collada) -> link local (euslisp)
     (dolist (l links)
       (setq (l . acentroid) (send l :inverse-transform-vector
                                   (send (send (car links) :worldcoords) :transform-vector
                                         (l . acentroid))))
       (setq (l . inertia-tensor) (m* (transpose (send l :worldrot))
                                      (m* (send (car links) :worldrot)
                                          (l . inertia-tensor))))
       ))
   (send-super :init-ending)
   (send self :make-collision-model-for-links)
   ;;
   (dolist (j (mapcan #'(lambda (x) (if (and (derivedp (cdr x) joint)
                                             (not (memq (cdr x) (send self :joint-list))))
                                        (list (cdr x)))) (send self :slots)))
     (send (send j :child-link) :add-joint j)
     (send (send j :child-link) :add-parent-link (send j :parent-link))
     (send (send j :parent-link) :add-child-links (send j :child-link)))
   )
  (:change-visual
   (&optional (visual :convex))
   (dolist (lk (send self :links))
     (dolist (bd (send lk :bodies))
       (when (derivedp bd collada-body)
         (send bd :change-visual visual)))))
  ;; fullbody-inverse-kinematics overwrite
  ;;  reduce root-link's weight based on leg's joint limit
  ;;  increase stop and cog-gain
  (:fullbody-inverse-kinematics
   (target-coords &rest args &key (stop 250) (cog-gain 2.0) (additional-weight-list) (use-6dof-joint-leg-gain nil) &allow-other-keys)
   (let* ((leg-ul (send self :calc-union-link-list (send self :legs :links))))
     (send self :reset-joint-angle-limit-weight-old leg-ul)
     (send-message* self robot-model :fullbody-inverse-kinematics
                    target-coords
                    :stop stop :cog-gain cog-gain
                    :additional-weight-list
                    (append
                     additional-weight-list
                     (if use-6dof-joint-leg-gain
                         (list
                          (list (car (send self :links))
                                #'(lambda ()
                                    ;; set root-link 6dof-joint's weight based on legs' joint limit
                                    (let* ((min-weight
                                            (reduce #'(lambda (x y) (min x y))
                                                    (coerce (send self :calc-inverse-kinematics-weight-from-link-list
                                                                  leg-ul :union-link-list leg-ul) cons))))
                                      (fill (instantiate float-vector 6) min-weight)))
                                )
                          )))
                    args)
     ))
  ;; make collision model from faces or gl-vertices
  (:make-collision-model-for-links
   (&key (fat 0) (collision-func 'pqp-collision-check) ((:links ls) (send self :links)))
   (dolist (ll ls)
     (let (fs glv usefs)
       (dolist (bd (send ll :bodies))
         (if (find-method bd :def-gl-vertices)
             (push (send bd :glvertices) glv)
           (push (send bd :faces) fs)))
       (setq fs (flatten fs))
       (cond
        ((and (not fs) glv) ;; if there is no faces, use glvertices for creating pqpmodel
         (setq usefs (instance gl::glvertices :init nil))
         (send usefs :transform (send (car glv) :worldcoords))
         (send usefs :append-glvertices glv)
         (let ((m (send usefs (read-from-string
                               (format nil ":make-~Amodel"
                                       (string-right-trim "-COLLISION-CHECK" (string collision-func))))
                        :fat fat)))
           (setf (get ll :pqpmodel) m)
           ))
        (fs
         (setq usefs
               (append fs
                       (mapcar #'(lambda (gv) (send gv :convert-to-faces :wrt :world)) glv)))
         (send ll
               (read-from-string
                (format nil ":make-~Amodel"
                        (string-right-trim "-COLLISION-CHECK" (string collision-func))))
               :fat fat
               :faces usefs))
        ))
     ))
  )

;; copy euscollada-body class definition from euscollada/src/euscollada-robot.l
;; This euscollada-body class is for bodies in robot model converted from collada files.
(defclass collada-body
  :super gl::glbody
  :slots (glvertices) ;; glvertices slot for backward compatibility
  )
(defmethod collada-body
  (:init (&key (name) (replace-obj))
    (if replace-obj
        (replace-object self replace-obj)
      (replace-object self (make-cube 10 10 10)))
    (if name (send self :name name))
    (setq glvertices gl::aglvertices)
    self)
  (:change-visual
   (&optional (visual :convex))
   (case visual
     ((list :convex :hull :convex-hull)
      (unless (send self :get :original-mesh)
        (send self :put :original-mesh gl::aglvertices)) ;; store original mesh
      (let* ((org-mesh (send self :get :original-mesh))
             (org-cds (send org-mesh :copy-worldcoords))
             (glv (gl::make-glvertices-from-faces (send self :faces))))
        (send glv :set-offset (send org-cds :inverse-transformation))
        (send glv :transform org-cds)
        (send org-mesh :assoc glv)
        (setq gl::aglvertices glv)
        glv))
     ((list :original :mesh :glvertices :original-mesh)
      (let ((org-mesh (send self :get :original-mesh)))
        (when org-mesh
          (dolist (d (send org-mesh :descendants)) ;; dissoc all discendants
            (send org-mesh :dissoc d))
          (setq gl::aglvertices org-mesh)
          org-mesh)))
     ))
  )
;;
(defun kiva-pod () (setq *kiva-pod* (instance kiva-pod-robot :init)))

(defclass kiva-pod-robot
  :super euscollada-robot
  :slots (base_to_y_part0_jt base_to_y_part1_jt base_to_y_part2_jt base_to_y_part3_jt base_to_z_part0_jt base_to_z_part1_jt base_to_z_part2_jt base_to_z_part3_jt base_to_z_part4_jt kiva-pod_y_part0_lk kiva-pod_y_part1_lk kiva-pod_y_part2_lk kiva-pod_y_part3_lk kiva-pod_z_part0_lk kiva-pod_z_part1_lk kiva-pod_z_part2_lk kiva-pod_z_part3_lk kiva-pod_z_part4_lk kiva-pod_base_lk ))
(defmethod kiva-pod-robot
  (:init
   (&rest args)
   (let ()
     (send-super* :init :name "kiva-pod" args)

     ;; node id=vkmodel0_node1, name=kiva-pod_y_part0, sid=node1
     (let ( b_gkmodel0_kiva-pod_y_part0_geom0)
       ;; define bodyset-link for kiva-pod_y_part0 : vkmodel0_node1
       (setq b_gkmodel0_kiva-pod_y_part0_geom0 (instance kiva-pod_gkmodel0_kiva-pod_y_part0_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_y_part0_geom0,domNode=kiva-pod_y_part0,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 4.3250000000000000e+02 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_y_part0_geom0 :transform localcds :world)
       )
       (setq kiva-pod_y_part0_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_y_part0_geom0)
                       :name "kiva-pod_y_part0"))
        (progn (send kiva-pod_y_part0_lk :weight 0.0) (send kiva-pod_y_part0_lk :centroid (float-vector 0 0 0)) (send kiva-pod_y_part0_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_y_part0_lk,domNode=kiva-pod_y_part0,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_y_part0_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part0_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node2, name=kiva-pod_y_part1, sid=node2
     (let ( b_gkmodel0_kiva-pod_y_part1_geom0)
       ;; define bodyset-link for kiva-pod_y_part1 : vkmodel0_node2
       (setq b_gkmodel0_kiva-pod_y_part1_geom0 (instance kiva-pod_gkmodel0_kiva-pod_y_part1_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_y_part1_geom0,domNode=kiva-pod_y_part1,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 1.6000000000000000e+02 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_y_part1_geom0 :transform localcds :world)
       )
       (setq kiva-pod_y_part1_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_y_part1_geom0)
                       :name "kiva-pod_y_part1"))
        (progn (send kiva-pod_y_part1_lk :weight 0.0) (send kiva-pod_y_part1_lk :centroid (float-vector 0 0 0)) (send kiva-pod_y_part1_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_y_part1_lk,domNode=kiva-pod_y_part1,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_y_part1_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part1_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node3, name=kiva-pod_y_part2, sid=node3
     (let ( b_gkmodel0_kiva-pod_y_part2_geom0)
       ;; define bodyset-link for kiva-pod_y_part2 : vkmodel0_node3
       (setq b_gkmodel0_kiva-pod_y_part2_geom0 (instance kiva-pod_gkmodel0_kiva-pod_y_part2_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_y_part2_geom0,domNode=kiva-pod_y_part2,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 -1.6000000000000000e+02 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_y_part2_geom0 :transform localcds :world)
       )
       (setq kiva-pod_y_part2_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_y_part2_geom0)
                       :name "kiva-pod_y_part2"))
        (progn (send kiva-pod_y_part2_lk :weight 0.0) (send kiva-pod_y_part2_lk :centroid (float-vector 0 0 0)) (send kiva-pod_y_part2_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_y_part2_lk,domNode=kiva-pod_y_part2,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_y_part2_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part2_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node4, name=kiva-pod_y_part3, sid=node4
     (let ( b_gkmodel0_kiva-pod_y_part3_geom0)
       ;; define bodyset-link for kiva-pod_y_part3 : vkmodel0_node4
       (setq b_gkmodel0_kiva-pod_y_part3_geom0 (instance kiva-pod_gkmodel0_kiva-pod_y_part3_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_y_part3_geom0,domNode=kiva-pod_y_part3,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 -4.3250000000000000e+02 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_y_part3_geom0 :transform localcds :world)
       )
       (setq kiva-pod_y_part3_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_y_part3_geom0)
                       :name "kiva-pod_y_part3"))
        (progn (send kiva-pod_y_part3_lk :weight 0.0) (send kiva-pod_y_part3_lk :centroid (float-vector 0 0 0)) (send kiva-pod_y_part3_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_y_part3_lk,domNode=kiva-pod_y_part3,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_y_part3_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part3_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node5, name=kiva-pod_z_part0, sid=node5
     (let ( b_gkmodel0_kiva-pod_z_part0_geom0)
       ;; define bodyset-link for kiva-pod_z_part0 : vkmodel0_node5
       (setq b_gkmodel0_kiva-pod_z_part0_geom0 (instance kiva-pod_gkmodel0_kiva-pod_z_part0_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_z_part0_geom0,domNode=kiva-pod_z_part0,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 -5.0000000000000000e+02)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_z_part0_geom0 :transform localcds :world)
       )
       (setq kiva-pod_z_part0_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_z_part0_geom0)
                       :name "kiva-pod_z_part0"))
        (progn (send kiva-pod_z_part0_lk :weight 0.0) (send kiva-pod_z_part0_lk :centroid (float-vector 0 0 0)) (send kiva-pod_z_part0_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_z_part0_lk,domNode=kiva-pod_z_part0,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_z_part0_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part0_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node6, name=kiva-pod_z_part1, sid=node6
     (let ( b_gkmodel0_kiva-pod_z_part1_geom0)
       ;; define bodyset-link for kiva-pod_z_part1 : vkmodel0_node6
       (setq b_gkmodel0_kiva-pod_z_part1_geom0 (instance kiva-pod_gkmodel0_kiva-pod_z_part1_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_z_part1_geom0,domNode=kiva-pod_z_part1,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 -2.2000000000000000e+02)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_z_part1_geom0 :transform localcds :world)
       )
       (setq kiva-pod_z_part1_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_z_part1_geom0)
                       :name "kiva-pod_z_part1"))
        (progn (send kiva-pod_z_part1_lk :weight 0.0) (send kiva-pod_z_part1_lk :centroid (float-vector 0 0 0)) (send kiva-pod_z_part1_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_z_part1_lk,domNode=kiva-pod_z_part1,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_z_part1_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part1_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node7, name=kiva-pod_z_part2, sid=node7
     (let ( b_gkmodel0_kiva-pod_z_part2_geom0)
       ;; define bodyset-link for kiva-pod_z_part2 : vkmodel0_node7
       (setq b_gkmodel0_kiva-pod_z_part2_geom0 (instance kiva-pod_gkmodel0_kiva-pod_z_part2_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_z_part2_geom0,domNode=kiva-pod_z_part2,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_z_part2_geom0 :transform localcds :world)
       )
       (setq kiva-pod_z_part2_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_z_part2_geom0)
                       :name "kiva-pod_z_part2"))
        (progn (send kiva-pod_z_part2_lk :weight 0.0) (send kiva-pod_z_part2_lk :centroid (float-vector 0 0 0)) (send kiva-pod_z_part2_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_z_part2_lk,domNode=kiva-pod_z_part2,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_z_part2_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part2_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node8, name=kiva-pod_z_part3, sid=node8
     (let ( b_gkmodel0_kiva-pod_z_part3_geom0)
       ;; define bodyset-link for kiva-pod_z_part3 : vkmodel0_node8
       (setq b_gkmodel0_kiva-pod_z_part3_geom0 (instance kiva-pod_gkmodel0_kiva-pod_z_part3_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_z_part3_geom0,domNode=kiva-pod_z_part3,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 2.2000000000000000e+02)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_z_part3_geom0 :transform localcds :world)
       )
       (setq kiva-pod_z_part3_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_z_part3_geom0)
                       :name "kiva-pod_z_part3"))
        (progn (send kiva-pod_z_part3_lk :weight 0.0) (send kiva-pod_z_part3_lk :centroid (float-vector 0 0 0)) (send kiva-pod_z_part3_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_z_part3_lk,domNode=kiva-pod_z_part3,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_z_part3_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part3_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node9, name=kiva-pod_z_part4, sid=node9
     (let ( b_gkmodel0_kiva-pod_z_part4_geom0)
       ;; define bodyset-link for kiva-pod_z_part4 : vkmodel0_node9
       (setq b_gkmodel0_kiva-pod_z_part4_geom0 (instance kiva-pod_gkmodel0_kiva-pod_z_part4_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_z_part4_geom0,domNode=kiva-pod_z_part4,targetCount=1,parent=:world), translateCount=3, rotateCount=4, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 5.0000000000000000e+02)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send b_gkmodel0_kiva-pod_z_part4_geom0 :transform localcds :world)
       )
       (setq kiva-pod_z_part4_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_z_part4_geom0)
                       :name "kiva-pod_z_part4"))
        (progn (send kiva-pod_z_part4_lk :weight 0.0) (send kiva-pod_z_part4_lk :centroid (float-vector 0 0 0)) (send kiva-pod_z_part4_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_z_part4_lk,domNode=kiva-pod_z_part4,targetCount=0,parent=:local), translateCount=3, rotateCount=4, matrixCount=0
       (send kiva-pod_z_part4_lk :transform
             (make-coords :pos (float-vector -0.0000000000000000e+00 -0.0000000000000000e+00 -0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part4_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;
       )

     ;; node id=vkmodel0_node0, name=kiva-pod_base, sid=node0
     (let ( b_gkmodel0_kiva-pod_base_geom0)
       ;; define bodyset-link for kiva-pod_base : vkmodel0_node0
       (setq b_gkmodel0_kiva-pod_base_geom0 (instance kiva-pod_gkmodel0_kiva-pod_base_geom0 :init))

       ;; writeTransform(name=b_gkmodel0_kiva-pod_base_geom0,domNode=kiva-pod_base,targetCount=1,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send b_gkmodel0_kiva-pod_base_geom0 :transform localcds :world)
       )
       (setq kiva-pod_base_lk
             (instance bodyset-link
                       :init (make-cascoords)
                       :bodies (list  b_gkmodel0_kiva-pod_base_geom0)
                       :name "kiva-pod_base"))
        (progn (send kiva-pod_base_lk :weight 0.0) (send kiva-pod_base_lk :centroid (float-vector 0 0 0)) (send kiva-pod_base_lk :inertia-tensor #2f((0 0 0)(0 0 0)(0 0 0))))

       ;; writeTransform(name=kiva-pod_base_lk,domNode=kiva-pod_base,targetCount=0,parent=:local), translateCount=1, rotateCount=1, matrixCount=0
       (send kiva-pod_base_lk :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       ;;1;

       ;; writeTransform(name=kiva-pod_y_part0_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part0_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_y_part0_lk)

       ;; writeTransform(name=kiva-pod_y_part1_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part1_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_y_part1_lk)

       ;; writeTransform(name=kiva-pod_y_part2_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part2_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_y_part2_lk)

       ;; writeTransform(name=kiva-pod_y_part3_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_y_part3_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_y_part3_lk)

       ;; writeTransform(name=kiva-pod_z_part0_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part0_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_z_part0_lk)

       ;; writeTransform(name=kiva-pod_z_part1_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part1_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_z_part1_lk)

       ;; writeTransform(name=kiva-pod_z_part2_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part2_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_z_part2_lk)

       ;; writeTransform(name=kiva-pod_z_part3_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part3_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_z_part3_lk)

       ;; writeTransform(name=kiva-pod_z_part4_lk,domNode=kiva-pod_base,targetCount=0,parent=:world), translateCount=1, rotateCount=1, matrixCount=0
       (let ((localcds (make-coords)))
       (send localcds :transform
             (make-coords :pos (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)
                          :angle 0.0000000000000000e+00 :axis (float-vector 1.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00)) :local)
       (send kiva-pod_z_part4_lk :transform localcds :world)
       )
       ;;2;
       (send kiva-pod_base_lk :assoc kiva-pod_z_part4_lk)
       )

     (send self :assoc kiva-pod_base_lk)
     (setq base_to_y_part0_jt
           (instance rotational-joint :init
                     :name "base_to_y_part0"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_y_part0_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_y_part1_jt
           (instance rotational-joint :init
                     :name "base_to_y_part1"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_y_part1_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_y_part2_jt
           (instance rotational-joint :init
                     :name "base_to_y_part2"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_y_part2_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_y_part3_jt
           (instance rotational-joint :init
                     :name "base_to_y_part3"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_y_part3_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_z_part0_jt
           (instance rotational-joint :init
                     :name "base_to_z_part0"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_z_part0_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_z_part1_jt
           (instance rotational-joint :init
                     :name "base_to_z_part1"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_z_part1_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_z_part2_jt
           (instance rotational-joint :init
                     :name "base_to_z_part2"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_z_part2_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_z_part3_jt
           (instance rotational-joint :init
                     :name "base_to_z_part3"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_z_part3_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))
     (setq base_to_z_part4_jt
           (instance rotational-joint :init
                     :name "base_to_z_part4"
                     :parent-link kiva-pod_base_lk :child-link kiva-pod_z_part4_lk
                     :axis (let ((tmp-axis (float-vector 0.0000000000000000e+00 0.0000000000000000e+00 0.0000000000000000e+00))) (if (eps= (norm tmp-axis) 0.0) (float-vector 1 0 0) tmp-axis))
                     :min 0.000000 :max 0.000000
                     ))

     ;; end coords from openrave manipulater tag
     ;; end coords from yaml file

     ;; limbs

     ;; links
     (setq links (list kiva-pod_base_lk))
     ;; joint-list
     (setq joint-list (list))

    ;; attach_sensor
    (setq force-sensors (sort (list ) #'< #'(lambda (x) (send x :get :sensor-id))))
    (setq imu-sensors (sort (list ) #'< #'(lambda (x) (send x :get :sensor-id))))
    (setq cameras (sort (list ) #'< #'(lambda (x) (send x :get :sensor-id))))
     ;; init-ending
     (send self :init-ending)

     ;; overwrite bodies to return draw-things links not (send link :bodies)
     (setq bodies (flatten (mapcar #'(lambda (b) (if (find-method b :bodies) (send b :bodies))) (list kiva-pod_y_part0_lk kiva-pod_y_part1_lk kiva-pod_y_part2_lk kiva-pod_y_part3_lk kiva-pod_z_part0_lk kiva-pod_z_part1_lk kiva-pod_z_part2_lk kiva-pod_z_part3_lk kiva-pod_z_part4_lk kiva-pod_base_lk))))

     ;; this robot does not have :reset-pose
;;     (send self :reset-pose) ;; :set reset-pose

     self)) ;; :init


    ;; all joints
    (:base_to_y_part0 (&rest args) (forward-message-to base_to_y_part0_jt args))
    (:base_to_y_part1 (&rest args) (forward-message-to base_to_y_part1_jt args))
    (:base_to_y_part2 (&rest args) (forward-message-to base_to_y_part2_jt args))
    (:base_to_y_part3 (&rest args) (forward-message-to base_to_y_part3_jt args))
    (:base_to_z_part0 (&rest args) (forward-message-to base_to_z_part0_jt args))
    (:base_to_z_part1 (&rest args) (forward-message-to base_to_z_part1_jt args))
    (:base_to_z_part2 (&rest args) (forward-message-to base_to_z_part2_jt args))
    (:base_to_z_part3 (&rest args) (forward-message-to base_to_z_part3_jt args))
    (:base_to_z_part4 (&rest args) (forward-message-to base_to_z_part4_jt args))

    ;; all links forwarding
    (:links (&rest args)
     (if (null args) (return-from :links (send-super :links)))
     (let ((key (car args))
           (nargs (cdr args)))
       (unless (keywordp key)
         (return-from :links (send-super* :links args)))
       (case key
         (:kiva-pod_y_part0 (forward-message-to kiva-pod_y_part0_lk nargs))
         (:kiva-pod_y_part1 (forward-message-to kiva-pod_y_part1_lk nargs))
         (:kiva-pod_y_part2 (forward-message-to kiva-pod_y_part2_lk nargs))
         (:kiva-pod_y_part3 (forward-message-to kiva-pod_y_part3_lk nargs))
         (:kiva-pod_z_part0 (forward-message-to kiva-pod_z_part0_lk nargs))
         (:kiva-pod_z_part1 (forward-message-to kiva-pod_z_part1_lk nargs))
         (:kiva-pod_z_part2 (forward-message-to kiva-pod_z_part2_lk nargs))
         (:kiva-pod_z_part3 (forward-message-to kiva-pod_z_part3_lk nargs))
         (:kiva-pod_z_part4 (forward-message-to kiva-pod_z_part4_lk nargs))
         (:kiva-pod_base (forward-message-to kiva-pod_base_lk nargs))
         (t (send-super* :links args)))))

    ;; all links
    (:kiva-pod_y_part0_lk (&rest args) (forward-message-to kiva-pod_y_part0_lk args))
    (:kiva-pod_y_part1_lk (&rest args) (forward-message-to kiva-pod_y_part1_lk args))
    (:kiva-pod_y_part2_lk (&rest args) (forward-message-to kiva-pod_y_part2_lk args))
    (:kiva-pod_y_part3_lk (&rest args) (forward-message-to kiva-pod_y_part3_lk args))
    (:kiva-pod_z_part0_lk (&rest args) (forward-message-to kiva-pod_z_part0_lk args))
    (:kiva-pod_z_part1_lk (&rest args) (forward-message-to kiva-pod_z_part1_lk args))
    (:kiva-pod_z_part2_lk (&rest args) (forward-message-to kiva-pod_z_part2_lk args))
    (:kiva-pod_z_part3_lk (&rest args) (forward-message-to kiva-pod_z_part3_lk args))
    (:kiva-pod_z_part4_lk (&rest args) (forward-message-to kiva-pod_z_part4_lk args))
    (:kiva-pod_base_lk (&rest args) (forward-message-to kiva-pod_base_lk args))

    ;; all manipulator

    ;; user-defined joint

    ;; attach_sensor
  )

(defclass kiva-pod_gkmodel0_kiva-pod_base_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_base_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-7.5000000000000000e+00 -2.1625000000000000e+02 -2.5000000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.5000000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.5000000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.5000000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.5000000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.5000000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.5000000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.5000000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.5000000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.5000000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.5000000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.5000000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.5000000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.5000000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.5000000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.5000000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.5000000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.5000000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.5000000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.5000000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.5000000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.5000000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.5000000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.5000000000000000e+02 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -7.4999998323619366e+00 -2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 -2.1625000238418579e+02 2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 -2.1625000238418579e+02 2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 -2.1625000238418579e+02 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -7.4999998323619366e+00 2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 2.1625000238418579e+02 2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 -2.1625000238418579e+02 2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 -2.1625000238418579e+02 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 7.4999998323619366e+00 2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 -2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 -2.1625000238418579e+02 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -7.4999998323619366e+00 2.1625000238418579e+02 2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 2.1625000238418579e+02 2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 -2.1625000238418579e+02 2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 -2.1625000238418579e+02 2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 7.4999998323619366e+00 2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 2.1625000238418579e+02 2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 2.1625000238418579e+02 2.5000000000000000e+02) (float-vector -7.4999998323619366e+00 2.1625000238418579e+02 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 7.4999998323619366e+00 2.1625000238418579e+02 2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 -2.1625000238418579e+02 -2.5000000000000000e+02) (float-vector 7.4999998323619366e+00 -2.1625000238418579e+02 2.5000000000000000e+02))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_y_part0_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_y_part0_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_y_part1_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_y_part1_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_y_part2_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_y_part2_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_y_part3_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_y_part3_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.5000000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.5000000000000000e+02 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector -2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 -2.5000000000000000e+02) (float-vector 2.1625000238418579e+02 -7.4999998323619366e+00 2.5000000000000000e+02))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_z_part0_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_z_part0_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_z_part1_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_z_part1_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_z_part2_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_z_part2_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_z_part3_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_z_part3_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    ))
   )
  )

(defclass kiva-pod_gkmodel0_kiva-pod_z_part4_geom0
  :super collada-body
  :slots ())
(defmethod kiva-pod_gkmodel0_kiva-pod_z_part4_geom0
  (:init (&key (name))
         (send self :def-gl-vertices)
         (send-super :init :name name :replace-obj (send self :qhull-faceset))
         (send self :assoc gl::aglvertices)
         self)
  (:def-gl-vertices ()
    (setq gl::aglvertices
       (instance gl::glvertices :init
          (list
          (list
           (list :type :triangles)
           (list :material (list
             (list :color (float-vector 0.1 0.1 0.1))
             (list :ambient (float-vector 0.200000 0.200000 0.200000 1.000000))
             (list :diffuse (float-vector 0.200000 0.200000 0.200000 1.000000))
           ))
           (list :indices #i( 0 1 2 2 3 0 4 5 6 6 7 4 8 9 10 10 11 8 12 13 14 14 15 12 16 17 18 18 19 16 20 21 22 22 23 20))
            (list :vertices (let ((mat (make-matrix 24 3))) (fvector-replace (array-entity mat) #f(-2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 -2.1625000000000000e+02 -7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 -7.5000000000000000e+00 -2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 2.1625000000000000e+02 2.1625000000000000e+02 7.5000000000000000e+00 )) mat))
           )
           )))
    (send gl::aglvertices :calc-normals)
    gl::aglvertices)
  (:qhull-faceset ()
   ;; qhull 24 -> 6 faces
   (instance faceset :init :faces (list
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 -2.1625000238418579e+02 -7.4999998323619366e+00))))
    (instance face :init :vertices (nreverse (list (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 -7.4999998323619366e+00) (float-vector 2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00) (float-vector -2.1625000238418579e+02 2.1625000238418579e+02 7.4999998323619366e+00))))
    ))
   )
  )



(provide :kiva-pod "/home/wkentaro/ros/hrp2_apc_ws/src/start-jsk/jsk_apc/jsk_apc2015_common/models/kiva-pod/urdf/kiva-pod-convex.l")
